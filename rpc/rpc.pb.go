// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CNIRequest struct {
	Request              string   `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CNIRequest) Reset()         { *m = CNIRequest{} }
func (m *CNIRequest) String() string { return proto.CompactTextString(m) }
func (*CNIRequest) ProtoMessage()    {}
func (*CNIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *CNIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CNIRequest.Unmarshal(m, b)
}
func (m *CNIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CNIRequest.Marshal(b, m, deterministic)
}
func (m *CNIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIRequest.Merge(m, src)
}
func (m *CNIRequest) XXX_Size() int {
	return xxx_messageInfo_CNIRequest.Size(m)
}
func (m *CNIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CNIRequest proto.InternalMessageInfo

func (m *CNIRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type CNIReply struct {
	Reply                string   `protobuf:"bytes,1,opt,name=Reply,proto3" json:"Reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CNIReply) Reset()         { *m = CNIReply{} }
func (m *CNIReply) String() string { return proto.CompactTextString(m) }
func (*CNIReply) ProtoMessage()    {}
func (*CNIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *CNIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CNIReply.Unmarshal(m, b)
}
func (m *CNIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CNIReply.Marshal(b, m, deterministic)
}
func (m *CNIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIReply.Merge(m, src)
}
func (m *CNIReply) XXX_Size() int {
	return xxx_messageInfo_CNIReply.Size(m)
}
func (m *CNIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIReply.DiscardUnknown(m)
}

var xxx_messageInfo_CNIReply proto.InternalMessageInfo

func (m *CNIReply) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*CNIRequest)(nil), "rpc.CNIRequest")
	proto.RegisterType((*CNIReply)(nil), "rpc.CNIReply")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x52, 0xe3, 0xe2, 0x72, 0xf6,
	0xf3, 0x0c, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0x87, 0x32, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x05, 0x2e, 0x0e, 0xb0, 0xba, 0x82, 0x9c, 0x4a,
	0x21, 0x11, 0x2e, 0x56, 0x30, 0x03, 0xaa, 0x06, 0xc2, 0x31, 0xea, 0x65, 0xe4, 0xe2, 0x73, 0xca,
	0x4c, 0x2b, 0xca, 0x2f, 0x2e, 0x71, 0x4a, 0x4c, 0xce, 0x4e, 0xcd, 0x4b, 0x11, 0x52, 0xe7, 0x62,
	0x76, 0x74, 0x71, 0x11, 0xe2, 0xd7, 0x03, 0x59, 0x8a, 0xb0, 0x46, 0x8a, 0x17, 0x21, 0x50, 0x90,
	0x53, 0xa9, 0xc4, 0x00, 0x52, 0xe8, 0xe2, 0xea, 0x43, 0x84, 0x42, 0x4d, 0x2e, 0x56, 0x67, 0x0f,
	0x57, 0x67, 0x6f, 0xc2, 0x4a, 0x93, 0xd8, 0xc0, 0xbe, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xe2, 0x7d, 0x2b, 0x3d, 0xf2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BifrostBackendClient is the client API for BifrostBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BifrostBackendClient interface {
	ADD(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error)
	DEL(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error)
	CHECK(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error)
}

type bifrostBackendClient struct {
	cc *grpc.ClientConn
}

func NewBifrostBackendClient(cc *grpc.ClientConn) BifrostBackendClient {
	return &bifrostBackendClient{cc}
}

func (c *bifrostBackendClient) ADD(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error) {
	out := new(CNIReply)
	err := c.cc.Invoke(ctx, "/rpc.BifrostBackend/ADD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifrostBackendClient) DEL(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error) {
	out := new(CNIReply)
	err := c.cc.Invoke(ctx, "/rpc.BifrostBackend/DEL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bifrostBackendClient) CHECK(ctx context.Context, in *CNIRequest, opts ...grpc.CallOption) (*CNIReply, error) {
	out := new(CNIReply)
	err := c.cc.Invoke(ctx, "/rpc.BifrostBackend/CHECK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BifrostBackendServer is the server API for BifrostBackend service.
type BifrostBackendServer interface {
	ADD(context.Context, *CNIRequest) (*CNIReply, error)
	DEL(context.Context, *CNIRequest) (*CNIReply, error)
	CHECK(context.Context, *CNIRequest) (*CNIReply, error)
}

// UnimplementedBifrostBackendServer can be embedded to have forward compatible implementations.
type UnimplementedBifrostBackendServer struct {
}

func (*UnimplementedBifrostBackendServer) ADD(ctx context.Context, req *CNIRequest) (*CNIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ADD not implemented")
}
func (*UnimplementedBifrostBackendServer) DEL(ctx context.Context, req *CNIRequest) (*CNIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DEL not implemented")
}
func (*UnimplementedBifrostBackendServer) CHECK(ctx context.Context, req *CNIRequest) (*CNIReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CHECK not implemented")
}

func RegisterBifrostBackendServer(s *grpc.Server, srv BifrostBackendServer) {
	s.RegisterService(&_BifrostBackend_serviceDesc, srv)
}

func _BifrostBackend_ADD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostBackendServer).ADD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BifrostBackend/ADD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostBackendServer).ADD(ctx, req.(*CNIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BifrostBackend_DEL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostBackendServer).DEL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BifrostBackend/DEL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostBackendServer).DEL(ctx, req.(*CNIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BifrostBackend_CHECK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CNIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BifrostBackendServer).CHECK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.BifrostBackend/CHECK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BifrostBackendServer).CHECK(ctx, req.(*CNIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BifrostBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.BifrostBackend",
	HandlerType: (*BifrostBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ADD",
			Handler:    _BifrostBackend_ADD_Handler,
		},
		{
			MethodName: "DEL",
			Handler:    _BifrostBackend_DEL_Handler,
		},
		{
			MethodName: "CHECK",
			Handler:    _BifrostBackend_CHECK_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
